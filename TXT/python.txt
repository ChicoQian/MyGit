Python
->>>>>>>>>数据类型-集合<<<<<<<<<<
List 
L = ['Adam', 95.5, 'Lisa', 85, 'Bart', 59]
print L[-1]、L.append('Paul')
del L[-1] equals L.pop()
tuple（中文翻译为“ 元组 ”。tuple 和 list 非常类似，但是，tuple一旦创建完毕，就不能修改了。）
t = (1,)//正是因为用()定义单元素的tuple有歧义，所以 Python 规定，单元素 tuple 要多加一个逗号“,”
>>> print t
t = ('a', 'b', ['A', 'B'])
L = t[2]
L[0] = 'X'
->>>>>>>>>判断&循环<<<<<<<<<<注意缩进
if age >= 18:
    print 'adult'
elif age >= 6:
    print 'teenager'
else:
    print 'baby'

FOR
L = ['Adam', 'Lisa', 'Bart']
for name in L:
    print name
WHILE
while x < 100:
    
	sum += x
    
	x += 2
print sum
->>>>>>>>>数据类型-集合 键值对<<<<<<<<<<
dict 篇
花括号 {} 表示这是一个dict，然后按照 key: value, 写出来即可。最后一个 key: value 的逗号可以省略
d = {
    'Adam': 95,
    'Lisa': 85,
    'Bart': 59
}
>>> len(d)
3
if 'Paul' in d:
    print d['Paul']/查成绩
d.get(95)/分数
 d['Paul'] = 72/赋值
for key in d:/遍历
    print key + ':', d[key]
for v in d.values():
    print v
>>> for key, value in d.items():
...     print key, ':', value
特点 ：
dict的第一个特点是查找速度快，无论dict有10个元素还是10万个元素，查找速度都一样。而list的查找速度随着元素增加而逐渐下降。
不过dict的查找速度快不是没有代价的，dict的缺点是占用内存大，还会浪费很多内容，list正好相反，占用内存小，但是查找速度慢。
dict是按 key 查找的
dict的第二个特点就是存储的key-value序对是没有顺序的！这和list不一样：
dict的第三个特点是作为 key 的元素必须不可变
set 篇
set 持有一系列元素，这一点和 list 很像，但是set的元素没有重复，而且是无序的，这点和 dict 的 key很像。
>>> s = set(['A', 'B', 'C', 'C'])
>>> print s
set(['A', 'C', 'B'])/去重
>>> len(s)
>>> 'Bart' in s/查找
True
>>> for name in s:/遍历
...     print name
>>> s.add(4)
>>> s.remove(4)
特点：
set的内部结构和dict很像，唯一区别是不存储value，因此，判断一个元素是否在set中速度很快。
set存储的元素和dict的key类似，必须是不变对象，因此，任何可变对象是不能放入set中的。
最后，set存储的元素也是没有顺序的。
->>>>>>>>>函数篇<<<<<<<<<<
def quadratic_equation(a, b, c):

    d = b*b - 4*a*c
    if d > 0:

        return (-b+math.sqrt(d))/(2*a), (-b-math.sqrt(d))/(2*a)

    elif d == 0:

        return (-b)/(2*a)

    else:

        return '无解'


print quadratic_equation(2, 3, 0)

def fn(*args): //可变参数
    print args

->>>>>>>>>切片<<<<<<<<<<
>>> L = ['Adam', 'Lisa', 'Bart', 'Paul']
>>> L[1:3]
['Lisa', 'Bart']
>>> L[::2]
['Adam', 'Bart']
第三个参数表示每N个取一个，上面的 L[::2] 会每两个元素取出一个来，也就是隔一个取一个。
>>> L[-4:-1:2]
['Adam', 'Bart']
记住倒数第一个元素的索引是-1。倒序切片包含起始索引，不包含结束索引。
>>> 'ABCDEFG'[::2]
'ACEG'
->>>>>>>>>列表生成式<<<<<<<<<<
>>> [x * x for x in range(1, 11)]
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
->>>>>>>>>python中高级函数<<<<<<<<<<
map()函数
map()是 Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。
def f(x):
    return x*x
print map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])
[1, 4, 9, 10, 25, 36, 49, 64, 81]
reduce()函数
reduce()函数也是Python内置的一个高阶函数。reduce()函数接收的参数和 map()类似，一个函数 f，一个list，但行为和 map()不同，reduce()传入的函数 f 必须接收两个参数，reduce()对list的每个元素反复调用函数f，并返回最终结果值。
filter()函数
filter()函数是 Python 内置的另一个有用的高阶函数，filter()函数接收一个函数 f 和一个list，这个函数 f 的作用是对每个元素进行判断，返回 True或 False，filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。
sorted()函数
 sorted()也是一个高阶函数，它可以接收一个比较函数来实现自定义排序，比较函数的定义是，传入两个待比较的元素 x, y，如果 x 应该排在 y 的前面，返回 -1，如果 x 应该排在 y 的后面，返回 1。如果 x 和 y 相等，返回 0。
->>>>>>>>>python面向对象<<<<<<<<<<
class Person(object):
    def __init__(self, name, gender, birth):
        self.name = name
        self.gender = gender
        self.__birth = birth //如果一个属性由双下划线开头(__)，该属性就无法被外部访问
继承
class Student(Person):
    def __init__(self, name, gender, score):
        super(Student, self).__init__(name, gender)
        self.score = score
一定要用 super(Student, self).__init__(name, gender) 去初始化父类，否则，继承自 Person 的 Student 将没有 name 和 gender。
函数super(Student, self)将返回当前类继承的父类，即 Person ，然后调用__init__()方法，注意self参数已在super()中传入，在__init__()中将隐式传递，不需要写出（也不能写）。