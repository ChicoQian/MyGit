Linux 命令
CD
LS LL
mkdir
rmdir
cp data1.txt data2.txt
rm
pwd
mv
cat
find /home -name "*.txt"
chmod [who] [操作符] [mode] 文件名 
$chmod o+w 　file5
u 表示该档案的拥有者，g 表示与该档案的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。 
+ 表示增加权限、- 表示取消权限、= 表示唯一设定权限。
(2)
语法为：chmod abc file 
其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。 
r=4，w=2，x=1 
若要rwx属性则4+2+1=7； 
若要rw-属性则4+2=6； 
若要r-x属性则4+1=5。

shell 脚本 http://www.runoob.com/linux/linux-shell-variable.html
(第一步$ chmod +x test.sh 添加execute权限
之后一定要写成 ./test.sh，而不是 test.sh)
#!/bin/bash
echo "Hello World !"
->>>>>>>>>>>>变量<<<<<<<<<<<<<<<
for skill in Ada Coffe Action Java; do
    echo "I am good at ${skill}Script"
done
->>>>>>>>>>>>$* 与 $@ 区别：<<<<<<<<<<<<<<<
#!/bin/bash
echo "-- \$* 演示 ---"
for i in "$*"; do全部
    echo $i
done

echo "-- \$@ 演示 ---"
for i in "$@"; do各个
    echo $i
done
->>>>>>>>>数组<<<<<<<<<<<<<<<<<<<<
my_array=(A B "C" D)
echo "第一个元素为: ${my_array[0]}"
echo "数组的元素为: ${my_array[*]}"
->>>>>>>>>比较+IF+or<<<<<<<<<<<<<<<
if [ $a -lt 100 -o $b -gt 100 ]
then
   echo "$a -lt 100 -o $b -gt 100 : 返回 true"
elif condition2 
then 
    command2
else
   echo "$a -lt 100 -o $b -gt 100 : 返回 false"
fi
->>>>>>>>>输出 读取+转义+换行+重定向<<<<<<<<<<<<<<<
#!/bin/sh
read name 
echo "\"$name It is a test\" \n" > myfile
echo `date` //显示命令执行结果（反引号）
->>>>>>>>>循环<<<<<<<<<<
#!/bin/bash
while :
do
    echo -n "输入 1 到 5 之间的数字:"
    read aNum
    case $aNum in
        1|2|3|4|5) echo "你输入的数字为 $aNum!"
        ;;
        *) echo "你输入的数字不是 1 到 5 之间的! 游戏结束"
            break
        ;;
    esac
done
->>>>>>>>>函数<<<<<<<<<<
funWithReturn(){
    echo "这个函数会对输入的两个数字进行相加运算..."
    echo "输入第一个数字: "
    read aNum
    echo "输入第二个数字: "
    read anotherNum
    echo "两个数字分别为 $aNum 和 $anotherNum !"
    return $(($aNum+$anotherNum))
}
funWithReturn
echo "输入的两个数字之和为 $? !"
函数返回值在调用该函数后通过 $? 来获得。
注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。
funWithParam(){
    echo "第一个参数为 $1 !"
    echo "第二个参数为 $2 !"
->>>>>>>>>Shell 输入/输出重定向<<<<<<<<<<
如果不希望文件内容被覆盖，可以使用 >> 追加到文件末尾
标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。
标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。
标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。
#!/bin/bash
exec 1>testopt
exec 2>errlog
如果希望将 stdout 和 stderr 合并后重定向到 file，可以这样写：
$ command > file 2>&1

